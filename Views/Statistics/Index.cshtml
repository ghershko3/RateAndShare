@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Statistics";
}

<h2>@ViewData["Title"]</h2>

<div class="stat-chart">
    <h3>Users by rates amount</h3><br />
    <p>This chart compares users according to their rates amount.</p>
    <div class="bar"></div>
</div>

<div class="stat-chart">
    <h3>Users amount by country</h3><br />
    <p>This pie diagram represents the distribution of users according to their countries.</p>
    <div id="tooltip"></div>
    <div class="pie"></div>
</div>

<script src="https://d3js.org/d3.v5.min.js"></script>

<script>
    var countries = JSON.parse('@Html.Raw(ViewBag.countries)');
    function drawBarChart(data) {
        // Define css for the graph.
        var margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 960 - margin.left - margin.right,
            height = 380 - margin.top - margin.bottom;

        // Set the ranges of scales.
        var x = d3.scaleBand()
            .range([0, width])
            .padding(0.1);
        var y = d3.scaleLinear()
            .range([height, 0]);

        // Get 10 colors from palette.
        var color = d3.schemeCategory10;

        // Append the svg object to the body of the page.
        // Append a 'group' element to 'svg'.
        // Moves the 'group' element to the top left margin.
        var svg = d3.select(".bar").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Scaling the ranges for the data.
        x.domain(data.map(function (d) { return d.username; }));
        y.domain([0, d3.max(data, function (d) { return d.count; })]);

        // Append the rectangles for the bars.
        svg.selectAll(".bar")
            .data(data)
            .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.username); })
            .attr("width", x.bandwidth())
            .attr("y", function (d) { return y(d.count); })
            .attr("height", function (d) { return height - y(d.count); })
            .attr('fill', function (d, i) { return color[i]; });

        // Add x Axis
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // Add y Axis
        svg.append("g")
            .call(d3.axisLeft(y).ticks(4))
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "-35px")
            .text("Num Of Rates");
    }

    function drawPieChart(data) {

        // Defing height and width to the pie.
        var h = 300;
        var w = 300;

        // Define inner and outer radius for the pie.
        var innerRadius = w / 4;
        var outerRadius = w / 2;

        // Generate pie as function to be called.
        var pie = d3.pie().value(function (d) {
            return d.count;
        });

        // Creating color scheme, generates 10 scale ordnal.
        var color = d3.schemeCategory10;

        // Will be used to generate the path attribute.
        var arc = d3.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius);

        // Create the svg canvas.
        var svg = d3.select('.pie')
            .append('svg')
            .attr('width', w)
            .attr('height', h);

        // Set up groups of arcs.
        var arcs = svg.selectAll('g.arc')
            .data(pie(data))
            .enter()
            .append('g')
            .attr('class', 'arc')
            .attr('transform', 'translate(' + outerRadius + ', ' + outerRadius + ')')
            .on("mouseover", function (d) {
                d3.select('#tooltip')
                    .style("visibility", "visible")
                    .text(d.data.count + " users from: " + countries[d.data.countryId]);
            })
            .on("mousemove", function () {
                d3.select('#tooltip')
                    .style("top", (event.pageY - 10) + "px")
                    .style("left", (event.pageX + 10) + "px");
            })
            .on("mouseout", function () {
                d3.select('#tooltip')
                    .style("visibility", "hidden");
            });

        // Add path to groups.
        arcs.append('path')
            .attr('fill', function (d, i) {
                return color[i];
            })
            .attr('d', arc);

        // Append text.
        arcs.append('text')
            .attr("transform", function (d) {
                return "translate(" + arc.centroid(d) + ")"; // Getting the center point of the shape.
            })
            .attr("text-anchor", "middle")
            .text(function (d) {
                return d.value;
            });

    }

    // Draws the graphs according to the data from the controller.
    drawBarChart(JSON.parse('@Html.Raw(ViewBag.userRatesData)'));
    drawPieChart(JSON.parse('@Html.Raw(ViewBag.userLocationData)'));
</script>